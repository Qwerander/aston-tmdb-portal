import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../store';
import { apiRequest } from '../../api/instanceApi';



export interface IMovie {
  adult?: boolean
  backdrop_path?: string
  genre_ids?: Array<number>
  id: number
  original_language?: string
  original_title?: string
  overview?: string
  popularity?: number
  poster_path: string
  release_date?: string
  title: string
  video?: boolean
  vote_average: number
  vote_count?: number
}

export interface IMoviesState {
  movies: { 
    movies: Record<number, IMovie[]>
    total_pages: number
  };
  moviesSearch: {
    movies: Record<number, IMovie[]>;
    total_pages: number
  } 
  status: 'idle' | 'loading' | 'failed';
}

const initialState: IMoviesState = {
  movies: {
    movies: [],
    total_pages: 0
  },
  moviesSearch: {
    movies: [],
    total_pages: 0,
  },
  status: 'idle',
};

type QueryType = {
  page: number
  search?: string
}

export const getMoviesAsync = createAsyncThunk(
  'movies/fetchMovies',
  async (data: QueryType) => {
    const res = await apiRequest.get(`/movie/now_playing?&page=${data.page}`);
    const movies = res.data.results
    const total_pages = res.data.total_pages
    return { page: data.page, movies, total_pages }
  }
);

export const getMoviesSearchAsync = createAsyncThunk(
  'movies/fetchMoviesSearch',
  async (data: QueryType) => {
    console.log(data);

    const res = await apiRequest.get(`/search/movie?query=${data.search}&page=${data.page}`);
    const movies = res.data.results
    const total_pages = res.data.total_pages
    return { page: data.page, movies, total_pages }
  }
);


export const moviesSlice = createSlice({
  name: 'movies',
  initialState,
  reducers: {
    clearMoviesSearch: (state) => {
      state.moviesSearch.movies = []
      state.moviesSearch.total_pages = 0
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(getMoviesAsync.fulfilled, (state, action) => {
      const { movies, page, total_pages } = action.payload
      state.movies.movies[page] = movies
      state.movies.total_pages = total_pages
    })
    builder.addCase(getMoviesSearchAsync.fulfilled, (state, action) => {
      const { movies, page, total_pages } = action.payload
      state.moviesSearch.movies[page] = movies
      state.moviesSearch.total_pages = total_pages
    })
  },
});


export const { clearMoviesSearch } = moviesSlice.actions;



// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default moviesSlice.reducer;
