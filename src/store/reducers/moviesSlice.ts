import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../store';
import { apiRequest } from '../../api/instanceApi';



export interface IMovie {
  adult: boolean
  backdrop_path: string
  genre_ids: Array<number>
  id: number
  original_language: string
  original_title: string
  overview: string
  popularity: number
  poster_path: string
  release_date: string
  title: string
  video: boolean
  vote_average: number
  vote_count: number
}

export interface IMoviesState {
  movies: Array<IMovie>;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: IMoviesState = {
  movies: [],
  status: 'idle',
};

export const getMoviesAsync = createAsyncThunk(
  'movies/fetchMovies',
  async () => {
    const res = await apiRequest.get('/movie/now_playing');

    return res.data.results
  }
);

export const moviesSlice = createSlice({
  name: 'movies',
  initialState,
  reducers: {

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(getMoviesAsync.fulfilled, (state, action) => {
      state.movies = action.payload
    }
    )
  },
});


export const { } = moviesSlice.actions;



// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default moviesSlice.reducer;
