import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../store';
import { apiRequest } from '../../api/instanceApi';

interface IGenre {
  id: number
  name: string
}

interface IProduction {
  id: number
  logo_path: string
  name: string
  origin_country: string
}
interface IProductionCountry {
  iso_3166_1: string
  name: string
}

interface ISpokenLanguage {
  english_name: string
  iso_639_1: string
  name: string
}

export interface IMovie {
  adult: boolean
  backdrop_path: string
  belongs_to_collection: string
  budget: number
  genres: Array<IGenre>
  homepage: string
  id: number
  imdb_id: string
  original_language: string
  original_title: string
  overview: string
  popularity: number
  poster_path: string
  production_companies: Array<IProduction>
  production_countries: Array<IProductionCountry>
  release_date: string
  revenue: number
  runtime: number
  spoken_languages: Array<ISpokenLanguage>
  status: string
  tagline: string
  title: string
  video: boolean
  vote_average: number
  vote_count: number
}

export interface IMovieState {
  movie: IMovie | null
  status: 'idle' | 'loading' | 'failed';
}

const initialState: IMovieState = {
  movie: null,
  status: 'idle'
};

type QueryType = {
  id: number
}

export const getMovieByIdAsync = createAsyncThunk(
  'movie/fetchMovie',
  async (data: QueryType) => {
    const res = await apiRequest.get(`/movie/${data.id}`);
    const movie = res.data

    return { movie }
  }
);


export const movieSlice = createSlice({
  name: 'movie',
  initialState,
  reducers: {
    clearMovie: (state) => {
      state.movie = null
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(getMovieByIdAsync.fulfilled, (state, action) => {
      state.movie = action.payload.movie
      state.status = 'idle'
    })
    builder.addCase(getMovieByIdAsync.pending, (state) => {
      state.status = 'loading'
    })
  },
});


export const { clearMovie } = movieSlice.actions;



// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default movieSlice.reducer;
